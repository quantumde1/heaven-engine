name: CI/CD Build

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build with Alpine
        run: |
          docker run --rm -v ${{ github.workspace }}:/app alpine:edge /bin/sh -c "
            apk add --no-cache \
              raylib-dev \
              vlc-dev \
              lua5.3-dev \
              raylib \
              lua5.3 \
              vlc \
              dub \
              lld \
              ldc \
              bash \
              alpine-sdk 7zip && wget https://github.com/ldc-developers/ldc/releases/download/v1.40.0-beta4/ldc2-1.40.0-beta4-windows-multilib.7z && mkdir /opt/ldc2/ 7z x ldc2-1.40.0-beta4-windows-multilib && cp -r ldc2-1.40.0-beta4-windows-multilib/lib* /opt/ldc2/ && echo '"i[3-6]86-.*-windows-msvc": { switches = [ "-defaultlib=phobos2-ldc,druntime-ldc", "-link-defaultlib-shared=false" ]; lib-dirs = [ "/opt/ldc2/lib32" ]; }; "x86_64-.*-windows-msvc": { switches = [ "-defaultlib=phobos2-ldc,druntime-ldc", "-link-defaultlib-shared=false" ]; lib-dirs = [ "/opt/ldc2/lib64" ]; };' >> /etc/ldc2.conf &&   \
            cd /app && \
            git config --global --add safe.directory /app && \
            chmod +x ./build.sh && \
            ./build.sh && rm -rf .git && dub build --arch=x86_64-pc-windows-msvc --force
          "

      - name: Create archive
        run: zip -r -9 build.zip ./ # Замените ./build/ на директорию с результатами сборки

      - name: Upload Artifact
        uses: actions/upload-artifact@v3  # Updated to v3
        with:
          name: build-artifacts-all-in-one
          path: build.zip
